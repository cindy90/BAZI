#!/usr/bin/env python3
"""
Simple test to trace backend errors
"""
import sys
import os
import traceback

# Add the backend directory to Python path
backend_dir = os.path.join(os.path.dirname(__file__), 'backend')
sys.path.insert(0, backend_dir)

print("üîç Testing backend imports...")

try:
    print("1Ô∏è‚É£ Testing core imports...")
    from app.schemas.bazi import BaziCalculateRequest, BaziCalculateResponse
    print("‚úÖ Schemas imported successfully")
    
    print("2Ô∏è‚É£ Testing main module...")
    from app.services.main import calculate_bazi_data
    print("‚úÖ Main module imported successfully")
    
    print("3Ô∏è‚É£ Testing calculation with real data...")
    from datetime import datetime
    
    # Create test request
    test_request = BaziCalculateRequest(
        gender="Áî∑",
        birth_datetime=datetime.fromisoformat("1990-04-29T12:00:00+08:00"),
        birth_place="Âåó‰∫¨"
    )
    
    print("‚úÖ Test request created successfully")
    print(f"Request: {test_request}")
    
    # Try to calculate (this is async, so we need to handle it properly)
    import asyncio
    
    async def test_calc():
        try:
            result = await calculate_bazi_data(test_request, quick_mode=True)
            print("‚úÖ Calculation successful!")
            print(f"Result type: {type(result)}")
            print(f"Basic fields: {list(result.__dict__.keys())}")
            return result
        except Exception as e:
            print(f"‚ùå Calculation failed: {e}")
            traceback.print_exc()
            return None
    
    # Run the async test
    print("4Ô∏è‚É£ Running async calculation test...")
    result = asyncio.run(test_calc())
    
    if result:
        print("üéâ Test completed successfully!")
    else:
        print("üí• Test failed!")

except Exception as e:
    print(f"‚ùå Import or setup failed: {e}")
    traceback.print_exc()
