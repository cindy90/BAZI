"""
地理位置服务模块
提供基于城市名称的经纬度查找功能，支持离线数据库
"""
import json
import os
import re
from typing import Dict, Optional, Tuple, List
from .logger_config import setup_logger

logger = setup_logger("location_service")

class LocationService:
    """地理位置服务类，提供城市名称到经纬度的转换功能"""
    
    def __init__(self):
        self.city_database = {}
        self.province_database = {}
        self.alias_mapping = {}
        self._load_databases()
    
    def _load_databases(self):
        """加载城市数据库"""
        try:
            # 尝试从JSON文件加载数据库
            db_file = os.path.join(os.path.dirname(__file__), '..', '..', 'city_coordinates.json')
            if os.path.exists(db_file):
                with open(db_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.city_database = data.get('cities', {})
                    self.province_database = data.get('provinces', {})
                    self.alias_mapping = data.get('aliases', {})
                logger.info(f"成功加载城市数据库，包含{len(self.city_database)}个城市")
            else:
                logger.warning("城市数据库文件不存在，使用内置数据")
                self._init_builtin_database()
        except Exception as e:
            logger.error(f"加载城市数据库失败: {e}，使用内置数据")
            self._init_builtin_database()
    
    def _init_builtin_database(self):
        """初始化内置城市数据库"""
        # 主要城市坐标数据（经度, 纬度）
        self.city_database = {
            # 直辖市
            "北京": (116.4074, 39.9042),
            "北京市": (116.4074, 39.9042),
            "上海": (121.4737, 31.2304),
            "上海市": (121.4737, 31.2304),
            "天津": (117.2008, 39.0842),
            "天津市": (117.2008, 39.0842),
            "重庆": (106.5516, 29.5630),
            "重庆市": (106.5516, 29.5630),
            
            # 省会及主要城市
            "广州": (113.2644, 23.1291),
            "广州市": (113.2644, 23.1291),
            "深圳": (114.0579, 22.5431),
            "深圳市": (114.0579, 22.5431),
            "杭州": (120.1551, 30.2741),
            "杭州市": (120.1551, 30.2741),
            "南京": (118.7969, 32.0603),
            "南京市": (118.7969, 32.0603),
            "武汉": (114.2619, 30.5928),
            "武汉市": (114.2619, 30.5928),
            "成都": (104.0665, 30.5728),
            "成都市": (104.0665, 30.5728),
            "西安": (108.9398, 34.3416),
            "西安市": (108.9398, 34.3416),
            "郑州": (113.6254, 34.7466),
            "郑州市": (113.6254, 34.7466),
            "济南": (117.0009, 36.6758),
            "济南市": (117.0009, 36.6758),
            "沈阳": (123.4315, 41.8057),
            "沈阳市": (123.4315, 41.8057),
            "长春": (125.3245, 43.8868),
            "长春市": (125.3245, 43.8868),
            "哈尔滨": (126.6394, 45.7566),
            "哈尔滨市": (126.6394, 45.7566),
            "合肥": (117.2272, 31.8206),
            "合肥市": (117.2272, 31.8206),
            "福州": (119.3063, 26.0745),
            "福州市": (119.3063, 26.0745),
            "南昌": (115.8921, 28.6765),
            "南昌市": (115.8921, 28.6765),
            "长沙": (112.9388, 28.2281),
            "长沙市": (112.9388, 28.2281),
            "海口": (110.3312, 20.0311),
            "海口市": (110.3312, 20.0311),
            "南宁": (108.3669, 22.8170),
            "南宁市": (108.3669, 22.8170),
            "昆明": (102.8329, 24.8801),
            "昆明市": (102.8329, 24.8801),
            "贵阳": (106.7135, 26.5783),
            "贵阳市": (106.7135, 26.5783),
            "拉萨": (91.1409, 29.6456),
            "拉萨市": (91.1409, 29.6456),
            "兰州": (103.8236, 36.0581),
            "兰州市": (103.8236, 36.0581),
            "西宁": (101.7782, 36.6171),
            "西宁市": (101.7782, 36.6171),
            "银川": (106.2309, 38.4872),
            "银川市": (106.2309, 38.4872),
            "乌鲁木齐": (87.6177, 43.7928),
            "乌鲁木齐市": (87.6177, 43.7928),
            "石家庄": (114.5149, 38.0428),
            "石家庄市": (114.5149, 38.0428),
            "太原": (112.5665, 37.8732),
            "太原市": (112.5665, 37.8732),
            
            # 特别行政区
            "香港": (114.1694, 22.3193),
            "香港特别行政区": (114.1694, 22.3193),
            "澳门": (113.5491, 22.1987),
            "澳门特别行政区": (113.5491, 22.1987),
            
            # 江苏省主要城市
            "苏州": (120.6519, 31.3989),
            "苏州市": (120.6519, 31.3989),
            "无锡": (120.3019, 31.5844),
            "无锡市": (120.3019, 31.5844),
            "常州": (119.9463, 31.7919),
            "常州市": (119.9463, 31.7919),
            "南通": (120.8956, 32.0162),
            "南通市": (120.8956, 32.0162),
            "扬州": (119.4179, 32.3932),
            "扬州市": (119.4179, 32.3932),
            "镇江": (119.4763, 32.2044),
            "镇江市": (119.4763, 32.2044),
            "泰州": (119.9151, 32.4849),
            "泰州市": (119.9151, 32.4849),
            "宿迁": (118.2757, 33.9521),
            "宿迁市": (118.2757, 33.9521),
            
            # 浙江省主要城市
            "宁波": (121.5440, 29.8683),
            "宁波市": (121.5440, 29.8683),
            "温州": (120.6994, 28.0002),
            "温州市": (120.6994, 28.0002),
            "嘉兴": (120.7550, 30.7467),
            "嘉兴市": (120.7550, 30.7467),
            "湖州": (120.0864, 30.8941),
            "湖州市": (120.0864, 30.8941),
            "绍兴": (120.5820, 30.0003),
            "绍兴市": (120.5820, 30.0003),
            "金华": (119.6477, 29.0785),
            "金华市": (119.6477, 29.0785),
            "衢州": (118.8718, 28.9270),
            "衢州市": (118.8718, 28.9270),
            "舟山": (122.2559, 30.0360),
            "舟山市": (122.2559, 30.0360),
            "台州": (121.4286, 28.6576),
            "台州市": (121.4286, 28.6576),
            "丽水": (119.9220, 28.4517),
            "丽水市": (119.9220, 28.4517),
            
            # 广东省主要城市
            "佛山": (113.1220, 23.0301),
            "佛山市": (113.1220, 23.0301),
            "东莞": (113.7518, 23.0489),
            "东莞市": (113.7518, 23.0489),
            "中山": (113.3824, 22.5211),
            "中山市": (113.3824, 22.5211),
            "珠海": (113.5767, 22.2709),
            "珠海市": (113.5767, 22.2709),
            "江门": (113.0782, 22.5751),
            "江门市": (113.0782, 22.5751),
            "惠州": (114.4129, 23.1115),
            "惠州市": (114.4129, 23.1115),
            "汕头": (116.7081, 23.3700),
            "汕头市": (116.7081, 23.3700),
            "湛江": (110.3593, 21.2707),
            "湛江市": (110.3593, 21.2707),
            "茂名": (110.9255, 21.6687),
            "茂名市": (110.9255, 21.6687),
            "肇庆": (112.4721, 23.0786),
            "肇庆市": (112.4721, 23.0786),
            
            # 山东省主要城市
            "青岛": (120.3826, 36.0671),
            "青岛市": (120.3826, 36.0671),
            "烟台": (121.3906, 37.4638),
            "烟台市": (121.3906, 37.4638),
            "潍坊": (119.1078, 36.7161),
            "潍坊市": (119.1078, 36.7161),
            "临沂": (118.3118, 35.1045),
            "临沂市": (118.3118, 35.1045),
            "济宁": (116.5871, 35.4154),
            "济宁市": (116.5871, 35.4154),
            "泰安": (117.0874, 36.2009),
            "泰安市": (117.0874, 36.2009),
            "威海": (122.1202, 37.5138),
            "威海市": (122.1202, 37.5138),
            "日照": (119.5269, 35.4164),
            "日照市": (119.5269, 35.4164),
            "滨州": (117.9708, 37.3835),
            "滨州市": (117.9708, 37.3835),
            "东营": (118.6751, 37.4615),
            "东营市": (118.6751, 37.4615),
            "聊城": (115.9167, 36.4550),
            "聊城市": (115.9167, 36.4550),
            "德州": (116.3075, 37.4608),
            "德州市": (116.3075, 37.4608),
            "菏泽": (115.4808, 35.2333),
            "菏泽市": (115.4808, 35.2333),
            "枣庄": (117.3236, 34.8106),
            "枣庄市": (117.3236, 34.8106),
            "淄博": (118.0371, 36.8134),
            "淄博市": (118.0371, 36.8134),
        }
        
        # 省份中心坐标
        self.province_database = {
            "北京": (116.4074, 39.9042),
            "天津": (117.2008, 39.0842),
            "河北": (114.5149, 38.0428),
            "河北省": (114.5149, 38.0428),
            "山西": (112.5665, 37.8732),
            "山西省": (112.5665, 37.8732),
            "内蒙古": (111.8540, 40.8173),
            "内蒙古自治区": (111.8540, 40.8173),
            "辽宁": (123.4315, 41.8057),
            "辽宁省": (123.4315, 41.8057),
            "吉林": (125.3245, 43.8868),
            "吉林省": (125.3245, 43.8868),
            "黑龙江": (126.6394, 45.7566),
            "黑龙江省": (126.6394, 45.7566),
            "上海": (121.4737, 31.2304),
            "江苏": (118.7969, 32.0603),
            "江苏省": (118.7969, 32.0603),
            "浙江": (120.1551, 30.2741),
            "浙江省": (120.1551, 30.2741),
            "安徽": (117.2272, 31.8206),
            "安徽省": (117.2272, 31.8206),
            "福建": (119.3063, 26.0745),
            "福建省": (119.3063, 26.0745),
            "江西": (115.8921, 28.6765),
            "江西省": (115.8921, 28.6765),
            "山东": (117.0009, 36.6758),
            "山东省": (117.0009, 36.6758),
            "河南": (113.6254, 34.7466),
            "河南省": (113.6254, 34.7466),
            "湖北": (114.2619, 30.5928),
            "湖北省": (114.2619, 30.5928),
            "湖南": (112.9388, 28.2281),
            "湖南省": (112.9388, 28.2281),
            "广东": (113.2644, 23.1291),
            "广东省": (113.2644, 23.1291),
            "广西": (108.3669, 22.8170),
            "广西壮族自治区": (108.3669, 22.8170),
            "海南": (110.3312, 20.0311),
            "海南省": (110.3312, 20.0311),
            "重庆": (106.5516, 29.5630),
            "四川": (104.0665, 30.5728),
            "四川省": (104.0665, 30.5728),
            "贵州": (106.7135, 26.5783),
            "贵州省": (106.7135, 26.5783),
            "云南": (102.8329, 24.8801),
            "云南省": (102.8329, 24.8801),
            "西藏": (91.1409, 29.6456),
            "西藏自治区": (91.1409, 29.6456),
            "陕西": (108.9398, 34.3416),
            "陕西省": (108.9398, 34.3416),
            "甘肃": (103.8236, 36.0581),
            "甘肃省": (103.8236, 36.0581),
            "青海": (101.7782, 36.6171),
            "青海省": (101.7782, 36.6171),
            "宁夏": (106.2309, 38.4872),
            "宁夏回族自治区": (106.2309, 38.4872),
            "新疆": (87.6177, 43.7928),
            "新疆维吾尔自治区": (87.6177, 43.7928),
            "香港": (114.1694, 22.3193),
            "香港特别行政区": (114.1694, 22.3193),
            "澳门": (113.5491, 22.1987),
            "澳门特别行政区": (113.5491, 22.1987),
            "台湾": (121.0000, 23.5000),
            "台湾省": (121.0000, 23.5000),
        }
        
        # 城市别名映射
        self.alias_mapping = {
            "首都": "北京",
            "魔都": "上海",
            "羊城": "广州",
            "鹏城": "深圳",
            "花城": "广州",
            "春城": "昆明",
            "泉城": "济南",
            "星城": "长沙",
            "江城": "武汉",
            "山城": "重庆",
            "榕城": "福州",
            "蓉城": "成都",
            "古城": "西安",
            "钢城": "鞍山",
            "冰城": "哈尔滨",
        }
        
        logger.info(f"初始化内置城市数据库：{len(self.city_database)}个城市，{len(self.province_database)}个省份")
    
    def normalize_location_name(self, location: str) -> str:
        """标准化地名，去除常见后缀和前缀"""
        if not location:
            return ""
        
        # 去除空格和特殊字符
        location = re.sub(r'[\s\-_]+', '', location)
        
        # 检查别名映射
        if location in self.alias_mapping:
            return self.alias_mapping[location]
        
        # 去除常见后缀
        suffixes = ['市', '县', '区', '省', '自治区', '特别行政区', '维吾尔自治区', '回族自治区', '壮族自治区']
        original = location
        for suffix in suffixes:
            if location.endswith(suffix):
                location = location[:-len(suffix)]
                break
        
        # 如果去除后缀后找不到，尝试原名
        if location not in self.city_database and location not in self.province_database:
            location = original
        
        return location
    
    def get_coordinates(self, location: str) -> Optional[Tuple[float, float]]:
        """
        根据地名获取经纬度坐标
        
        Args:
            location: 地名（城市或省份）
            
        Returns:
            (longitude, latitude) 或 None
        """
        if not location:
            return None
        
        normalized = self.normalize_location_name(location)
        
        # 首先在城市数据库中查找
        if normalized in self.city_database:
            coords = self.city_database[normalized]
            logger.info(f"找到城市坐标: {location} -> {normalized} -> {coords}")
            return coords
        
        # 然后在省份数据库中查找
        if normalized in self.province_database:
            coords = self.province_database[normalized]
            logger.info(f"找到省份坐标: {location} -> {normalized} -> {coords}")
            return coords
        
        # 模糊匹配：查找包含关键词的城市
        for city_name, coords in self.city_database.items():
            if normalized in city_name or city_name in normalized:
                logger.info(f"模糊匹配找到城市坐标: {location} -> {city_name} -> {coords}")
                return coords
        
        # 模糊匹配：查找包含关键词的省份
        for province_name, coords in self.province_database.items():
            if normalized in province_name or province_name in normalized:
                logger.info(f"模糊匹配找到省份坐标: {location} -> {province_name} -> {coords}")
                return coords
        
        logger.warning(f"未找到地点坐标: {location} (标准化: {normalized})")
        return None
    
    def get_location_info(self, location: str) -> Dict[str, any]:
        """
        获取完整的地理位置信息
        
        Args:
            location: 地名
            
        Returns:
            包含province, city, longitude, latitude等信息的字典
        """
        coords = self.get_coordinates(location)
        
        if coords is None:
            return {
                "province": "",
                "city": location or "",
                "longitude": None,
                "latitude": None,
                "found": False,
                "error": f"未找到地点: {location}"
            }
        
        longitude, latitude = coords
        normalized = self.normalize_location_name(location)
        
        # 尝试识别省份和城市
        province = ""
        city = ""
        
        if normalized in self.city_database:
            city = normalized
            # 尝试根据城市名推断省份
            province = self._infer_province_from_city(normalized)
        elif normalized in self.province_database:
            province = normalized
            city = ""
        else:
            # 模糊匹配的情况
            city = location
        
        return {
            "province": province,
            "city": city or location,
            "longitude": longitude,
            "latitude": latitude,
            "found": True,
            "original_input": location,
            "normalized_name": normalized
        }
    
    def _infer_province_from_city(self, city: str) -> str:
        """根据城市名推断省份"""
        # 这里可以建立城市到省份的映射表
        city_to_province = {
            "北京": "北京", "上海": "上海", "天津": "天津", "重庆": "重庆",
            "广州": "广东", "深圳": "广东", "佛山": "广东", "东莞": "广东", "中山": "广东", "珠海": "广东",
            "杭州": "浙江", "宁波": "浙江", "温州": "浙江", "嘉兴": "浙江",
            "南京": "江苏", "苏州": "江苏", "无锡": "江苏", "常州": "江苏",
            "济南": "山东", "青岛": "山东", "烟台": "山东", "潍坊": "山东",
            "成都": "四川", "武汉": "湖北", "西安": "陕西", "郑州": "河南",
            "长沙": "湖南", "沈阳": "辽宁", "长春": "吉林", "哈尔滨": "黑龙江",
            "合肥": "安徽", "福州": "福建", "南昌": "江西", "海口": "海南",
            "南宁": "广西", "昆明": "云南", "贵阳": "贵州", "拉萨": "西藏",
            "兰州": "甘肃", "西宁": "青海", "银川": "宁夏", "乌鲁木齐": "新疆",
            "石家庄": "河北", "太原": "山西", "香港": "香港", "澳门": "澳门"
        }
        
        return city_to_province.get(city, "")
    
    def search_locations(self, query: str, limit: int = 10) -> List[Dict[str, any]]:
        """
        搜索地点，支持模糊匹配
        
        Args:
            query: 搜索关键词
            limit: 返回结果数量限制
            
        Returns:
            匹配的地点列表
        """
        if not query:
            return []
        
        results = []
        query_normalized = self.normalize_location_name(query)
        
        # 精确匹配
        for location in list(self.city_database.keys()) + list(self.province_database.keys()):
            if query_normalized == self.normalize_location_name(location):
                info = self.get_location_info(location)
                if info["found"]:
                    info["match_type"] = "exact"
                    results.append(info)
        
        # 如果精确匹配没有结果，进行模糊匹配
        if not results:
            for location in list(self.city_database.keys()) + list(self.province_database.keys()):
                location_normalized = self.normalize_location_name(location)
                if (query_normalized in location_normalized or 
                    location_normalized in query_normalized or
                    query in location):
                    info = self.get_location_info(location)
                    if info["found"]:
                        info["match_type"] = "fuzzy"
                        results.append(info)
                    if len(results) >= limit:
                        break
        
        return results[:limit]

# 创建全局实例
location_service = LocationService()
